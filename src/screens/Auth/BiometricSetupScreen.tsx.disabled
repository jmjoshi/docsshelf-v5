/**
 * Biometric Authentication Setup Screen
 * Configures fingerprint, face recognition, and other biometric authentication methods
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  Alert,
  Platform,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import * as Progress from 'react-native-progress';

import AuthService from '@/services/auth/AuthService';
import type { BiometricType } from '@/types';

interface BiometricSetupScreenProps {
  userId: string;
  onComplete: (success: boolean, biometricType?: BiometricType) => void;
  onSkip?: () => void;
}

export const BiometricSetupScreen: React.FC<BiometricSetupScreenProps> = ({
  userId,
  onComplete,
  onSkip,
}) => {
  const [loading, setLoading] = useState(false);
  const [biometricAvailable, setBiometricAvailable] = useState(false);
  const [availableTypes, setAvailableTypes] = useState<BiometricType[]>([]);
  const [selectedType, setSelectedType] = useState<BiometricType | null>(null);
  const [setupComplete, setSetupComplete] = useState(false);

  useEffect(() => {
    checkBiometricAvailability();
  }, []);

  const checkBiometricAvailability = async () => {
    try {
      setLoading(true);
      const { available, types } = await AuthService.checkBiometricAvailability();
      setBiometricAvailable(available);
      setAvailableTypes(types);
      
      if (types.length > 0) {
        setSelectedType(types[0]);
      }
    } catch (error: any) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  const setupBiometric = async () => {
    if (!selectedType) return;

    try {
      setLoading(true);
      const result = await AuthService.setupBiometricAuth(userId);
      
      if (result.success) {
        setSetupComplete(true);
        Alert.alert(
          'Biometric Setup Complete',
          `${getBiometricDisplayName(result.biometricType!)} authentication has been successfully configured!`,
          [
            {
              text: 'OK',
              onPress: () => onComplete(true, result.biometricType!),
            },
          ]
        );
      } else {
        Alert.alert(
          'Setup Failed',
          'Biometric authentication setup was unsuccessful. Please try again or skip this step.',
          [
            { text: 'Try Again', onPress: setupBiometric },
            { text: 'Skip', onPress: () => onComplete(false) },
          ]
        );
      }
    } catch (error: any) {
      Alert.alert('Setup Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  const getBiometricIcon = (type: BiometricType): string => {
    switch (type) {
      case 'fingerprint':
        return 'finger-print';
      case 'faceId':
        return 'scan';
      case 'iris':
        return 'eye';
      case 'voice':
        return 'mic';
      default:
        return 'finger-print';
    }
  };

  const getBiometricDisplayName = (type: BiometricType): string => {
    switch (type) {
      case 'fingerprint':
        return 'Fingerprint';
      case 'faceId':
        return Platform.OS === 'ios' ? 'Face ID' : 'Face Recognition';
      case 'iris':
        return 'Iris Recognition';
      case 'voice':
        return 'Voice Recognition';
      default:
        return 'Biometric';
    }
  };

  const getBiometricDescription = (type: BiometricType): string => {
    switch (type) {
      case 'fingerprint':
        return 'Use your fingerprint to quickly and securely access your account';
      case 'faceId':
        return 'Use facial recognition to authenticate with just a glance';
      case 'iris':
        return 'Use iris scanning for highly secure authentication';
      case 'voice':
        return 'Use voice recognition for hands-free authentication';
      default:
        return 'Use biometric authentication for enhanced security';
    }
  };

  const renderBiometricOption = (type: BiometricType) => (
    <TouchableOpacity
      key={type}
      style={[
        styles.biometricOption,
        selectedType === type && styles.biometricOptionSelected,
      ]}
      onPress={() => setSelectedType(type)}
    >
      <View style={styles.biometricIconContainer}>
        <Ionicons
          name={getBiometricIcon(type) as any}
          size={48}
          color={selectedType === type ? '#1976D2' : '#666'}
        />
      </View>
      <View style={styles.biometricInfo}>
        <Text style={[styles.biometricName, selectedType === type && styles.biometricNameSelected]}>
          {getBiometricDisplayName(type)}
        </Text>
        <Text style={styles.biometricDescription}>
          {getBiometricDescription(type)}
        </Text>
      </View>
      {selectedType === type && (
        <Ionicons name="checkmark-circle" size={24} color="#1976D2" />
      )}
    </TouchableOpacity>
  );

  const renderAvailabilityCheck = () => {
    if (loading) {
      return (
        <View style={styles.loadingContainer}>
          <Progress.Circle size={60} indeterminate color="#1976D2" />
          <Text style={styles.loadingText}>Checking biometric availability...</Text>
        </View>
      );
    }

    if (!biometricAvailable) {
      return (
        <View style={styles.unavailableContainer}>
          <Ionicons name="warning" size={64} color="#FF9800" />
          <Text style={styles.unavailableTitle}>Biometric Authentication Unavailable</Text>
          <Text style={styles.unavailableDescription}>
            Your device doesn't support biometric authentication or no biometric data is enrolled.
          </Text>
          <Text style={styles.unavailableInstructions}>
            To use biometric authentication:
          </Text>
          <View style={styles.instructionsList}>
            <Text style={styles.instructionItem}>
              • Go to your device's Settings
            </Text>
            <Text style={styles.instructionItem}>
              • Set up fingerprint or face recognition
            </Text>
            <Text style={styles.instructionItem}>
              • Return to DocsShelf to configure
            </Text>
          </View>
          
          <TouchableOpacity
            style={styles.retryButton}
            onPress={checkBiometricAvailability}
          >
            <Ionicons name="refresh" size={20} color="#1976D2" />
            <Text style={styles.retryButtonText}>Check Again</Text>
          </TouchableOpacity>

          {onSkip && (
            <TouchableOpacity style={styles.skipButton} onPress={() => onComplete(false)}>
              <Text style={styles.skipButtonText}>Continue Without Biometrics</Text>
            </TouchableOpacity>
          )}
        </View>
      );
    }

    return null;
  };

  const renderSetupContent = () => {
    if (!biometricAvailable || availableTypes.length === 0) {
      return renderAvailabilityCheck();
    }

    if (setupComplete) {
      return (
        <View style={styles.successContainer}>
          <Ionicons name="checkmark-circle" size={64} color="#4CAF50" />
          <Text style={styles.successTitle}>Biometric Setup Complete!</Text>
          <Text style={styles.successDescription}>
            You can now use {getBiometricDisplayName(selectedType!)} to quickly access your DocsShelf account.
          </Text>
        </View>
      );
    }

    return (
      <View style={styles.setupContainer}>
        <Text style={styles.sectionTitle}>Choose Your Preferred Method</Text>
        <Text style={styles.sectionDescription}>
          Select the biometric authentication method you'd like to use:
        </Text>

        <View style={styles.biometricOptions}>
          {availableTypes.map(renderBiometricOption)}
        </View>

        <View style={styles.securityInfo}>
          <Ionicons name="shield-checkmark" size={24} color="#4CAF50" />
          <View style={styles.securityInfoText}>
            <Text style={styles.securityInfoTitle}>Your Security is Our Priority</Text>
            <Text style={styles.securityInfoDescription}>
              Biometric data is stored securely on your device and never transmitted to our servers.
            </Text>
          </View>
        </View>

        <TouchableOpacity
          style={[styles.setupButton, (!selectedType || loading) && styles.setupButtonDisabled]}
          onPress={setupBiometric}
          disabled={!selectedType || loading}
        >
          {loading ? (
            <Progress.Circle size={20} indeterminate color="#FFF" />
          ) : (
            <>
              <Ionicons name="shield-checkmark" size={20} color="#FFF" />
              <Text style={styles.setupButtonText}>
                Enable {selectedType ? getBiometricDisplayName(selectedType) : 'Biometric'}
              </Text>
            </>
          )}
        </TouchableOpacity>

        {onSkip && (
          <TouchableOpacity style={styles.skipButton} onPress={() => onComplete(false)}>
            <Text style={styles.skipButtonText}>Skip for Now</Text>
          </TouchableOpacity>
        )}
      </View>
    );
  };

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
      <LinearGradient colors={['#1976D2', '#1565C0']} style={styles.header}>
        <Ionicons name="finger-print" size={48} color="#FFF" />
        <Text style={styles.title}>Biometric Authentication</Text>
        <Text style={styles.subtitle}>
          Secure your account with biometric authentication
        </Text>
      </LinearGradient>

      <View style={styles.content}>
        {renderSetupContent()}
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  contentContainer: {
    flexGrow: 1,
  },
  header: {
    paddingTop: 60,
    paddingBottom: 30,
    paddingHorizontal: 20,
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFF',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#E3F2FD',
    textAlign: 'center',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  loadingContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
  },
  loadingText: {
    fontSize: 16,
    color: '#666',
    marginTop: 16,
  },
  unavailableContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  unavailableTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#333',
    marginTop: 20,
    marginBottom: 12,
    textAlign: 'center',
  },
  unavailableDescription: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 24,
  },
  unavailableInstructions: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  instructionsList: {
    alignSelf: 'stretch',
    marginBottom: 30,
  },
  instructionItem: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    paddingLeft: 10,
  },
  retryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    marginBottom: 16,
  },
  retryButtonText: {
    fontSize: 16,
    color: '#1976D2',
    marginLeft: 8,
    fontWeight: 'bold',
  },
  setupContainer: {
    flex: 1,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  sectionDescription: {
    fontSize: 16,
    color: '#666',
    marginBottom: 30,
    lineHeight: 24,
  },
  biometricOptions: {
    marginBottom: 30,
  },
  biometricOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFF',
    padding: 20,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: 'transparent',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  biometricOptionSelected: {
    borderColor: '#1976D2',
    backgroundColor: '#F3F8FF',
  },
  biometricIconContainer: {
    width: 80,
    alignItems: 'center',
  },
  biometricInfo: {
    flex: 1,
    marginLeft: 16,
  },
  biometricName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  biometricNameSelected: {
    color: '#1976D2',
  },
  biometricDescription: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
  securityInfo: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: '#E8F5E8',
    padding: 16,
    borderRadius: 12,
    marginBottom: 30,
  },
  securityInfoText: {
    marginLeft: 12,
    flex: 1,
  },
  securityInfoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  securityInfoDescription: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
  setupButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#1976D2',
    paddingVertical: 16,
    paddingHorizontal: 30,
    borderRadius: 25,
    marginBottom: 20,
  },
  setupButtonDisabled: {
    backgroundColor: '#CCC',
  },
  setupButtonText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFF',
    marginLeft: 8,
  },
  skipButton: {
    alignItems: 'center',
    paddingVertical: 15,
  },
  skipButtonText: {
    fontSize: 16,
    color: '#666',
    textDecorationLine: 'underline',
  },
  successContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
  },
  successTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginTop: 20,
    marginBottom: 12,
    textAlign: 'center',
  },
  successDescription: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    lineHeight: 24,
  },
});

export default BiometricSetupScreen;