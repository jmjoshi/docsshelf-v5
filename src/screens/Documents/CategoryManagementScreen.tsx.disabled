// @ts-nocheck
/**
 * CategoryManagementScreen - Manage document categories and folders
 * Allows users to create, edit, delete categories with hierarchical structure
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Modal,
  Alert,
  ScrollView,
} from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import DatabaseService, { Category } from '../../services/database/DatabaseService';
import {
  setCategories,
  addCategory as addCategoryAction,
  updateCategory as updateCategoryAction,
  removeCategory as removeCategoryAction,
  setLoading,
  setError,
} from '../../store/slices/documentSlice';
// import { CategoryTree } from '../../components/categories';

const CATEGORY_ICONS = [
  { key: 'folder', emoji: '📁', name: 'Folder' },
  { key: 'documents', emoji: '📄', name: 'Documents' },
  { key: 'work', emoji: '💼', name: 'Work' },
  { key: 'personal', emoji: '🏠', name: 'Personal' },
  { key: 'finance', emoji: '💰', name: 'Finance' },
  { key: 'health', emoji: '🏥', name: 'Health' },
  { key: 'education', emoji: '🎓', name: 'Education' },
  { key: 'travel', emoji: '✈️', name: 'Travel' },
  { key: 'legal', emoji: '⚖️', name: 'Legal' },
  { key: 'shopping', emoji: '🛍️', name: 'Shopping' },
  { key: 'utilities', emoji: '🔧', name: 'Utilities' },
  { key: 'entertainment', emoji: '🎬', name: 'Entertainment' },
];

const CATEGORY_COLORS = [
  { key: 'blue', color: '#4A90E2', name: 'Blue' },
  { key: 'red', color: '#E74C3C', name: 'Red' },
  { key: 'green', color: '#2ECC71', name: 'Green' },
  { key: 'orange', color: '#F39C12', name: 'Orange' },
  { key: 'purple', color: '#9B59B6', name: 'Purple' },
  { key: 'teal', color: '#1ABC9C', name: 'Teal' },
  { key: 'gray', color: '#34495E', name: 'Gray' },
  { key: 'pink', color: '#E91E63', name: 'Pink' },
  { key: 'indigo', color: '#3F51B5', name: 'Indigo' },
  { key: 'cyan', color: '#00BCD4', name: 'Cyan' },
];

export default function CategoryManagementScreen({ navigation }: any) {
  const dispatch = useDispatch();
  const { categories, loading } = useSelector((state: any) => state.document);
  const { user } = useSelector((state: any) => state.auth);

  const [modalVisible, setModalVisible] = useState(false);
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [categoryName, setCategoryName] = useState('');
  const [selectedIcon, setSelectedIcon] = useState('folder');
  const [selectedColor, setSelectedColor] = useState('#4A90E2');
  const [selectedParent, setSelectedParent] = useState<string | null>(null);

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    if (!user) return;

    try {
      dispatch(setLoading(true));
      const allCategories = await DatabaseService.getCategoryTree(user.id);
      dispatch(setCategories(allCategories));
    } catch (error) {
      console.error('Failed to load categories:', error);
      dispatch(setError('Failed to load categories'));
    } finally {
      dispatch(setLoading(false));
    }
  };

  const openCreateModal = (parentId: string | null = null) => {
    setEditingCategory(null);
    setCategoryName('');
    setSelectedIcon('folder');
    setSelectedColor('#4A90E2');
    setSelectedParent(parentId);
    setModalVisible(true);
  };

  const openEditModal = (category: Category) => {
    setEditingCategory(category);
    setCategoryName(category.name);
    setSelectedIcon(category.icon);
    setSelectedColor(category.color);
    setSelectedParent(category.parentId);
    setModalVisible(true);
  };

  const handleSaveCategory = async () => {
    if (!categoryName.trim()) {
      Alert.alert('Error', 'Please enter a category name');
      return;
    }

    if (!user) {
      Alert.alert('Error', 'User not authenticated');
      return;
    }

    try {
      dispatch(setLoading(true));

      if (editingCategory) {
        // Update existing category
        await DatabaseService.updateCategory(editingCategory.id, {
          name: categoryName.trim(),
          icon: selectedIcon,
          color: selectedColor,
          parentId: selectedParent,
        });

        const updated = await DatabaseService.getCategoryById(editingCategory.id);
        if (updated) {
          dispatch(updateCategoryAction(updated));
        }
      } else {
        // Create new category
        const newCategory = await DatabaseService.createCategory({
          name: categoryName.trim(),
          icon: selectedIcon,
          color: selectedColor,
          parentId: selectedParent,
          userId: user.id,
        });

        dispatch(addCategoryAction(newCategory));
      }

      setModalVisible(false);
      Alert.alert('Success', `Category ${editingCategory ? 'updated' : 'created'} successfully`);
    } catch (error) {
      console.error('Failed to save category:', error);
      Alert.alert('Error', 'Failed to save category');
    } finally {
      dispatch(setLoading(false));
    }
  };

  const handleDeleteCategory = (category: Category) => {
    Alert.alert(
      'Delete Category',
      `Are you sure you want to delete "${category.name}"? This will also delete all subcategories and documents.`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              dispatch(setLoading(true));
              await DatabaseService.deleteCategory(category.id);
              dispatch(removeCategoryAction(category.id));
              Alert.alert('Success', 'Category deleted successfully');
            } catch (error) {
              console.error('Failed to delete category:', error);
              Alert.alert('Error', 'Failed to delete category');
            } finally {
              dispatch(setLoading(false));
            }
          },
        },
      ]
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Categories</Text>
        <TouchableOpacity
          style={styles.addButton}
          onPress={() => openCreateModal()}
        >
          <Text style={styles.addButtonText}>+ New Category</Text>
        </TouchableOpacity>
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <Text>Loading categories...</Text>
        </View>
      ) : categories.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>No categories yet</Text>
          <Text style={styles.emptySubtext}>Create your first category to organize documents</Text>
        </View>
      ) : (
        <View style={styles.loadingContainer}>
          <Text>Categories: {categories.length}</Text>
          <Text>CategoryTree component temporarily disabled for debugging</Text>
        </View>
      )}

      {/* Category Modal */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {editingCategory ? 'Edit Category' : 'New Category'}
            </Text>

            <TextInput
              style={styles.input}
              placeholder="Category Name"
              value={categoryName}
              onChangeText={setCategoryName}
              autoFocus
            />

            <Text style={styles.sectionLabel}>Icon</Text>
            <ScrollView 
              horizontal 
              showsHorizontalScrollIndicator={false}
              style={styles.iconScrollContainer}
            >
              <View style={styles.iconGrid}>
                {CATEGORY_ICONS.map((iconObj) => (
                  <TouchableOpacity
                    key={iconObj.key}
                    style={[
                      styles.iconOption,
                      selectedIcon === iconObj.key && styles.iconOptionSelected,
                    ]}
                    onPress={() => setSelectedIcon(iconObj.key)}
                  >
                    <Text style={styles.iconOptionText}>{iconObj.emoji}</Text>
                    <Text style={styles.iconOptionLabel}>{iconObj.name}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            </ScrollView>

            <Text style={styles.sectionLabel}>Color</Text>
            <ScrollView 
              horizontal 
              showsHorizontalScrollIndicator={false}
              style={styles.colorScrollContainer}
            >
              <View style={styles.colorGrid}>
                {CATEGORY_COLORS.map((colorObj) => (
                  <TouchableOpacity
                    key={colorObj.key}
                    style={[
                      styles.colorOption,
                      { backgroundColor: colorObj.color },
                      selectedColor === colorObj.color && styles.colorOptionSelected,
                    ]}
                    onPress={() => setSelectedColor(colorObj.color)}
                  >
                    <Text style={styles.colorOptionLabel}>{colorObj.name}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            </ScrollView>

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalButton, styles.saveButton]}
                onPress={handleSaveCategory}
              >
                <Text style={styles.saveButtonText}>
                  {editingCategory ? 'Update' : 'Create'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333333',
  },
  addButton: {
    backgroundColor: '#4A90E2',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#666666',
    marginBottom: 8,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#999999',
    textAlign: 'center',
  },


  // Modal Styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 24,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 20,
  },
  input: {
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    marginBottom: 20,
  },
  sectionLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#666666',
    marginBottom: 12,
    marginTop: 8,
  },
  iconScrollContainer: {
    marginBottom: 20,
  },
  iconGrid: {
    flexDirection: 'row',
    gap: 12,
    paddingHorizontal: 4,
  },
  iconOption: {
    width: 64,
    height: 80,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: 'transparent',
    backgroundColor: '#F5F5F5',
    paddingVertical: 8,
  },
  iconOptionSelected: {
    borderColor: '#4A90E2',
    backgroundColor: '#E3F2FD',
  },
  iconOptionText: {
    fontSize: 24,
    marginBottom: 4,
  },
  iconOptionLabel: {
    fontSize: 10,
    color: '#666666',
    textAlign: 'center',
    fontWeight: '500',
  },
  colorScrollContainer: {
    marginBottom: 24,
  },
  colorGrid: {
    flexDirection: 'row',
    gap: 12,
    paddingHorizontal: 4,
  },
  colorOption: {
    width: 64,
    height: 64,
    borderRadius: 32,
    borderWidth: 3,
    borderColor: 'transparent',
    justifyContent: 'flex-end',
    alignItems: 'center',
    paddingBottom: 4,
  },
  colorOptionSelected: {
    borderColor: '#333333',
  },
  colorOptionLabel: {
    fontSize: 9,
    color: '#FFFFFF',
    fontWeight: '600',
    textShadowColor: 'rgba(0,0,0,0.7)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  modalButtons: {
    flexDirection: 'row',
    gap: 12,
  },
  modalButton: {
    flex: 1,
    padding: 14,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: '#F5F5F5',
  },
  cancelButtonText: {
    color: '#666666',
    fontWeight: '600',
  },
  saveButton: {
    backgroundColor: '#4A90E2',
  },
  saveButtonText: {
    color: '#FFFFFF',
    fontWeight: '600',
  },
});
